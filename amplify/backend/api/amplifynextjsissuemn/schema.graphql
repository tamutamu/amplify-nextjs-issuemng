# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
input AMPLIFY {
  globalAuthRule: AuthRule = { allow: public }
} # FOR TESTING ONLY!
type Todo
  @model
  @auth(
    rules: [
      {
        allow: owner
        provider: userPools
        operations: [create, read, update, delete]
      }
      { allow: private, provider: userPools }
      { allow: private, provider: iam }
    ]
  ) {
  content: String
}

type Authority
  @model
  @auth(
    rules: [
      {
        allow: owner
        provider: userPools
        operations: [create, read, update, delete]
      }
      { allow: private, provider: userPools }
      { allow: private, provider: iam }
    ]
  ) {
  group: String!
    @primaryKey(sortKeyFields: ["path", "scheme"])
    @index(
      name: "byPath"
      sortKeyFields: ["path"]
      queryField: "listAuthoritiesByPath"
    )
  scheme: String!
  path: String!
  name: String!
}

type SPC @model {
  id: ID
  name: String!
  schema: String!
  tenantId: String!
  token: Token @hasOne
}

type Token @model {
  id: ID
  name: String!
  tenantId: String!
  spc: SPC @belongsTo
}

type Sto @model {
  id: ID
  name: String!
  status: String
}

input createStoAPIInput {
  name: String!
  status: String
}

type Query {
  listTodoApi(name: String): [Todo]
    @auth(
      rules: [
        { allow: private, provider: userPools }
        { allow: private, provider: iam }
      ]
    )
    @function(name: "backendAPI-${env}")
}

type Mutation {
  adminCreateUser(username: String): String
    @function(name: "admincreateuser-${env}")

  adminDeleteUser(username: String): String
    @function(name: "admindeleteuser-${env}")

  resetMFA(username: String): String @function(name: "backendAPI-${env}")
}
